//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DBAccessor {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSUmfragen : DataSet {
        
        private umfragenDataTable tableumfragen;
        
        public DSUmfragen() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSUmfragen(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["umfragen"] != null)) {
                    this.Tables.Add(new umfragenDataTable(ds.Tables["umfragen"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public umfragenDataTable umfragen {
            get {
                return this.tableumfragen;
            }
        }
        
        public override DataSet Clone() {
            DSUmfragen cln = ((DSUmfragen)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["umfragen"] != null)) {
                this.Tables.Add(new umfragenDataTable(ds.Tables["umfragen"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableumfragen = ((umfragenDataTable)(this.Tables["umfragen"]));
            if ((this.tableumfragen != null)) {
                this.tableumfragen.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSUmfragen";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSUmfragen.xsd";
            this.Locale = new System.Globalization.CultureInfo("de-DE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableumfragen = new umfragenDataTable();
            this.Tables.Add(this.tableumfragen);
        }
        
        private bool ShouldSerializeumfragen() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void umfragenRowChangeEventHandler(object sender, umfragenRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class umfragenDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUmfrageID;
            
            private DataColumn columnTitel;
            
            private DataColumn columnBeschreibung;
            
            private DataColumn columnDatum_Beginn;
            
            private DataColumn columnDatum_Ende;
            
            private DataColumn columnr_userID;
            
            private DataColumn columnOnlinestatus;
            
            internal umfragenDataTable() : 
                    base("umfragen") {
                this.InitClass();
            }
            
            internal umfragenDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UmfrageIDColumn {
                get {
                    return this.columnUmfrageID;
                }
            }
            
            internal DataColumn TitelColumn {
                get {
                    return this.columnTitel;
                }
            }
            
            internal DataColumn BeschreibungColumn {
                get {
                    return this.columnBeschreibung;
                }
            }
            
            internal DataColumn Datum_BeginnColumn {
                get {
                    return this.columnDatum_Beginn;
                }
            }
            
            internal DataColumn Datum_EndeColumn {
                get {
                    return this.columnDatum_Ende;
                }
            }
            
            internal DataColumn r_userIDColumn {
                get {
                    return this.columnr_userID;
                }
            }
            
            internal DataColumn OnlinestatusColumn {
                get {
                    return this.columnOnlinestatus;
                }
            }
            
            public umfragenRow this[int index] {
                get {
                    return ((umfragenRow)(this.Rows[index]));
                }
            }
            
            public event umfragenRowChangeEventHandler umfragenRowChanged;
            
            public event umfragenRowChangeEventHandler umfragenRowChanging;
            
            public event umfragenRowChangeEventHandler umfragenRowDeleted;
            
            public event umfragenRowChangeEventHandler umfragenRowDeleting;
            
            public void AddumfragenRow(umfragenRow row) {
                this.Rows.Add(row);
            }
            
            public umfragenRow AddumfragenRow(string Titel, string Beschreibung, System.DateTime Datum_Beginn, System.DateTime Datum_Ende, int r_userID, int Onlinestatus) {
                umfragenRow rowumfragenRow = ((umfragenRow)(this.NewRow()));
                rowumfragenRow.ItemArray = new object[] {
                        null,
                        Titel,
                        Beschreibung,
                        Datum_Beginn,
                        Datum_Ende,
                        r_userID,
                        Onlinestatus};
                this.Rows.Add(rowumfragenRow);
                return rowumfragenRow;
            }
            
            public umfragenRow FindByUmfrageID(int UmfrageID) {
                return ((umfragenRow)(this.Rows.Find(new object[] {
                            UmfrageID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                umfragenDataTable cln = ((umfragenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new umfragenDataTable();
            }
            
            internal void InitVars() {
                this.columnUmfrageID = this.Columns["UmfrageID"];
                this.columnTitel = this.Columns["Titel"];
                this.columnBeschreibung = this.Columns["Beschreibung"];
                this.columnDatum_Beginn = this.Columns["Datum_Beginn"];
                this.columnDatum_Ende = this.Columns["Datum_Ende"];
                this.columnr_userID = this.Columns["r_userID"];
                this.columnOnlinestatus = this.Columns["Onlinestatus"];
            }
            
            private void InitClass() {
                this.columnUmfrageID = new DataColumn("UmfrageID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUmfrageID);
                this.columnTitel = new DataColumn("Titel", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitel);
                this.columnBeschreibung = new DataColumn("Beschreibung", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBeschreibung);
                this.columnDatum_Beginn = new DataColumn("Datum_Beginn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatum_Beginn);
                this.columnDatum_Ende = new DataColumn("Datum_Ende", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatum_Ende);
                this.columnr_userID = new DataColumn("r_userID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnr_userID);
                this.columnOnlinestatus = new DataColumn("Onlinestatus", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnlinestatus);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnUmfrageID}, true));
                this.columnUmfrageID.AutoIncrement = true;
                this.columnUmfrageID.AllowDBNull = false;
                this.columnUmfrageID.ReadOnly = true;
                this.columnUmfrageID.Unique = true;
                this.columnTitel.AllowDBNull = false;
                this.columnr_userID.AllowDBNull = false;
            }
            
            public umfragenRow NewumfragenRow() {
                return ((umfragenRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new umfragenRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(umfragenRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.umfragenRowChanged != null)) {
                    this.umfragenRowChanged(this, new umfragenRowChangeEvent(((umfragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.umfragenRowChanging != null)) {
                    this.umfragenRowChanging(this, new umfragenRowChangeEvent(((umfragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.umfragenRowDeleted != null)) {
                    this.umfragenRowDeleted(this, new umfragenRowChangeEvent(((umfragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.umfragenRowDeleting != null)) {
                    this.umfragenRowDeleting(this, new umfragenRowChangeEvent(((umfragenRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveumfragenRow(umfragenRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class umfragenRow : DataRow {
            
            private umfragenDataTable tableumfragen;
            
            internal umfragenRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableumfragen = ((umfragenDataTable)(this.Table));
            }
            
            public int UmfrageID {
                get {
                    return ((int)(this[this.tableumfragen.UmfrageIDColumn]));
                }
                set {
                    this[this.tableumfragen.UmfrageIDColumn] = value;
                }
            }
            
            public string Titel {
                get {
                    return ((string)(this[this.tableumfragen.TitelColumn]));
                }
                set {
                    this[this.tableumfragen.TitelColumn] = value;
                }
            }
            
            public string Beschreibung {
                get {
                    try {
                        return ((string)(this[this.tableumfragen.BeschreibungColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableumfragen.BeschreibungColumn] = value;
                }
            }
            
            public System.DateTime Datum_Beginn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableumfragen.Datum_BeginnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableumfragen.Datum_BeginnColumn] = value;
                }
            }
            
            public System.DateTime Datum_Ende {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableumfragen.Datum_EndeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableumfragen.Datum_EndeColumn] = value;
                }
            }
            
            public int r_userID {
                get {
                    return ((int)(this[this.tableumfragen.r_userIDColumn]));
                }
                set {
                    this[this.tableumfragen.r_userIDColumn] = value;
                }
            }
            
            public int Onlinestatus {
                get {
                    try {
                        return ((int)(this[this.tableumfragen.OnlinestatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableumfragen.OnlinestatusColumn] = value;
                }
            }
            
            public bool IsBeschreibungNull() {
                return this.IsNull(this.tableumfragen.BeschreibungColumn);
            }
            
            public void SetBeschreibungNull() {
                this[this.tableumfragen.BeschreibungColumn] = System.Convert.DBNull;
            }
            
            public bool IsDatum_BeginnNull() {
                return this.IsNull(this.tableumfragen.Datum_BeginnColumn);
            }
            
            public void SetDatum_BeginnNull() {
                this[this.tableumfragen.Datum_BeginnColumn] = System.Convert.DBNull;
            }
            
            public bool IsDatum_EndeNull() {
                return this.IsNull(this.tableumfragen.Datum_EndeColumn);
            }
            
            public void SetDatum_EndeNull() {
                this[this.tableumfragen.Datum_EndeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOnlinestatusNull() {
                return this.IsNull(this.tableumfragen.OnlinestatusColumn);
            }
            
            public void SetOnlinestatusNull() {
                this[this.tableumfragen.OnlinestatusColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class umfragenRowChangeEvent : EventArgs {
            
            private umfragenRow eventRow;
            
            private DataRowAction eventAction;
            
            public umfragenRowChangeEvent(umfragenRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public umfragenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
