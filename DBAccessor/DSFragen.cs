//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DBAccessor {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSFragen : DataSet {
        
        private fragenDataTable tablefragen;
        
        public DSFragen() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSFragen(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["fragen"] != null)) {
                    this.Tables.Add(new fragenDataTable(ds.Tables["fragen"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fragenDataTable fragen {
            get {
                return this.tablefragen;
            }
        }
        
        public override DataSet Clone() {
            DSFragen cln = ((DSFragen)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["fragen"] != null)) {
                this.Tables.Add(new fragenDataTable(ds.Tables["fragen"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablefragen = ((fragenDataTable)(this.Tables["fragen"]));
            if ((this.tablefragen != null)) {
                this.tablefragen.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSFragen";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSFragen.xsd";
            this.Locale = new System.Globalization.CultureInfo("de-DE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablefragen = new fragenDataTable();
            this.Tables.Add(this.tablefragen);
        }
        
        private bool ShouldSerializefragen() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void fragenRowChangeEventHandler(object sender, fragenRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fragenDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFrageID;
            
            private DataColumn columnr_UmfrageID;
            
            private DataColumn columnText;
            
            private DataColumn columnFrageart;
            
            private DataColumn columnReihenfolge;
            
            internal fragenDataTable() : 
                    base("fragen") {
                this.InitClass();
            }
            
            internal fragenDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FrageIDColumn {
                get {
                    return this.columnFrageID;
                }
            }
            
            internal DataColumn r_UmfrageIDColumn {
                get {
                    return this.columnr_UmfrageID;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn FrageartColumn {
                get {
                    return this.columnFrageart;
                }
            }
            
            internal DataColumn ReihenfolgeColumn {
                get {
                    return this.columnReihenfolge;
                }
            }
            
            public fragenRow this[int index] {
                get {
                    return ((fragenRow)(this.Rows[index]));
                }
            }
            
            public event fragenRowChangeEventHandler fragenRowChanged;
            
            public event fragenRowChangeEventHandler fragenRowChanging;
            
            public event fragenRowChangeEventHandler fragenRowDeleted;
            
            public event fragenRowChangeEventHandler fragenRowDeleting;
            
            public void AddfragenRow(fragenRow row) {
                this.Rows.Add(row);
            }
            
            public fragenRow AddfragenRow(int r_UmfrageID, string Text, int Frageart, int Reihenfolge) {
                fragenRow rowfragenRow = ((fragenRow)(this.NewRow()));
                rowfragenRow.ItemArray = new object[] {
                        null,
                        r_UmfrageID,
                        Text,
                        Frageart,
                        Reihenfolge};
                this.Rows.Add(rowfragenRow);
                return rowfragenRow;
            }
            
            public fragenRow FindByFrageID(int FrageID) {
                return ((fragenRow)(this.Rows.Find(new object[] {
                            FrageID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fragenDataTable cln = ((fragenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fragenDataTable();
            }
            
            internal void InitVars() {
                this.columnFrageID = this.Columns["FrageID"];
                this.columnr_UmfrageID = this.Columns["r_UmfrageID"];
                this.columnText = this.Columns["Text"];
                this.columnFrageart = this.Columns["Frageart"];
                this.columnReihenfolge = this.Columns["Reihenfolge"];
            }
            
            private void InitClass() {
                this.columnFrageID = new DataColumn("FrageID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrageID);
                this.columnr_UmfrageID = new DataColumn("r_UmfrageID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnr_UmfrageID);
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
                this.columnFrageart = new DataColumn("Frageart", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrageart);
                this.columnReihenfolge = new DataColumn("Reihenfolge", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReihenfolge);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFrageID}, true));
                this.columnFrageID.AutoIncrement = true;
                this.columnFrageID.AllowDBNull = false;
                this.columnFrageID.ReadOnly = true;
                this.columnFrageID.Unique = true;
                this.columnr_UmfrageID.AllowDBNull = false;
                this.columnText.AllowDBNull = false;
                this.columnFrageart.AllowDBNull = false;
            }
            
            public fragenRow NewfragenRow() {
                return ((fragenRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fragenRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fragenRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fragenRowChanged != null)) {
                    this.fragenRowChanged(this, new fragenRowChangeEvent(((fragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fragenRowChanging != null)) {
                    this.fragenRowChanging(this, new fragenRowChangeEvent(((fragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fragenRowDeleted != null)) {
                    this.fragenRowDeleted(this, new fragenRowChangeEvent(((fragenRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fragenRowDeleting != null)) {
                    this.fragenRowDeleting(this, new fragenRowChangeEvent(((fragenRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefragenRow(fragenRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fragenRow : DataRow {
            
            private fragenDataTable tablefragen;
            
            internal fragenRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefragen = ((fragenDataTable)(this.Table));
            }
            
            public int FrageID {
                get {
                    return ((int)(this[this.tablefragen.FrageIDColumn]));
                }
                set {
                    this[this.tablefragen.FrageIDColumn] = value;
                }
            }
            
            public int r_UmfrageID {
                get {
                    return ((int)(this[this.tablefragen.r_UmfrageIDColumn]));
                }
                set {
                    this[this.tablefragen.r_UmfrageIDColumn] = value;
                }
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tablefragen.TextColumn]));
                }
                set {
                    this[this.tablefragen.TextColumn] = value;
                }
            }
            
            public int Frageart {
                get {
                    return ((int)(this[this.tablefragen.FrageartColumn]));
                }
                set {
                    this[this.tablefragen.FrageartColumn] = value;
                }
            }
            
            public int Reihenfolge {
                get {
                    try {
                        return ((int)(this[this.tablefragen.ReihenfolgeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tablefragen.ReihenfolgeColumn] = value;
                }
            }
            
            public bool IsReihenfolgeNull() {
                return this.IsNull(this.tablefragen.ReihenfolgeColumn);
            }
            
            public void SetReihenfolgeNull() {
                this[this.tablefragen.ReihenfolgeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fragenRowChangeEvent : EventArgs {
            
            private fragenRow eventRow;
            
            private DataRowAction eventAction;
            
            public fragenRowChangeEvent(fragenRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fragenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
